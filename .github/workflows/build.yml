# .github/workflows/build.yml

on:
  pull_request:
    types: [closed]
    branches:
      - main # main 브랜치로의 Pull Request가 merge(closed)될 때 실행

jobs:
  deploy:
    if: github.event.pull_request.merged == true # PR이 merge 되었을 때만 job 실행
    runs-on: ubuntu-latest # 실행 환경

    steps:
      # 1. 소스 코드 가져오기
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      # 2. JDK 17 설정 (프로젝트와 버전을 맞춤)
      - name: JDK 17 설정
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Gradle 캐시 설정 (빌드 속도 향상)
      - name: Gradle 캐시 설정
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 4. gradlew 실행 권한 부여
      - name: Gradle에 실행 권한 부여
        run: chmod +x ./gradlew

      # 5. Gradle 빌드 (테스트는 제외하여 빌드 시간 단축)
      - name: Gradle 빌드 (테스트 제외)
        run: ./gradlew build -x test

      # 6. SCP를 사용하여 빌드된 JAR 파일 전송
      - name: SCP를 사용하여 빌드 파일 전송
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          source: "build/libs/*.jar" # build.gradle 수정으로 실행가능한 JAR 하나만 존재
          target: "~/app"
          strip_components: 2 # build/libs/ 경로를 제외하고 파일만 전송

      # 7. SSH로 서버에 접속하여 애플리케이션 배포
      - name: 애플리케이션 배포 및 실행
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            APP_DIR="$HOME/app"
            JAR_FILE=$(ls -t $APP_DIR/*.jar | head -n 1) # 서버에 있는 최신 JAR 파일
            LOG_FILE="$APP_DIR/nohup.out"
            PRIVATE_YML_PATH="$APP_DIR/application-private.yml"

            # 1. 기존에 실행 중인 애플리케이션 종료 (가장 안정적인 방식)
            echo "기존 프로세스를 찾아서 종료합니다."
            PID=$(ps -ef | grep "$JAR_FILE" | grep -v grep | awk '{print $2}')
            if [ -n "$PID" ]; then
              echo "기존 프로세스(PID: $PID)를 종료합니다."
              kill -9 $PID
              sleep 5
            fi

            # 2. 서버에 DB 접속을 위한 application-private.yml 파일 생성
            echo "서버에 application-private.yml 파일을 생성합니다."
            echo "${{ secrets.APP_PRIVATE_YML }}" > $PRIVATE_YML_PATH

            # 3. 새 애플리케이션을 백그라운드에서 실행
            echo "새 애플리케이션을 시작합니다: ${JAR_FILE}"
            nohup java -jar "$JAR_FILE" --spring.profiles.active=private > "$LOG_FILE" 2>&1 &
            
            echo "배포 스크립트가 성공적으로 완료되었습니다."