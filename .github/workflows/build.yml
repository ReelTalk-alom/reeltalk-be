on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  deploy:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up Gradle Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # --- [수정 1] application.yml 파일을 src/main/resources 경로에 생성 ---
      # 이렇게 하면 빌드 시 JAR 파일 내부에 설정 파일이 포함됩니다.
      - name: Create application.yml for build
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.APP_PRIVATE_YML }}" > src/main/resources/application.yml

      - name: Build with Gradle (excluding tests)
        run: ./gradlew build -x test

      # --- [수정 2] JAR 파일만 서버로 전송 ---
      # application.yml은 이미 JAR 안에 있으므로, JAR 파일만 전송하면 됩니다.
      - name: Transfer JAR file via SCP
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          source: "build/libs/*.jar"
          target: "~/app"
          strip_components: 2

      # --- [수정 3] 배포 스크립트 개선 ---
      - name: Deploy and run application
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            APP_DIR="$HOME/app"
            # 와일드카드를 사용하여 정확한 JAR 파일 이름을 찾습니다.
            JAR_FILE=$(find $APP_DIR -name "*.jar" | sort -r | head -n 1)
            LOG_FILE="$APP_DIR/nohup.out"

            echo "Target JAR file: ${JAR_FILE}"

            echo "Finding and killing the old process..."
            # pgrep을 사용하면 더 안정적으로 프로세스를 찾을 수 있습니다.
            PID=$(pgrep -f "${JAR_FILE}")
            if [ -n "$PID" ]; then
              echo "Killing old process (PID: $PID)..."
              kill -9 $PID
              sleep 5
            else
              echo "No running process to kill."
            fi

            echo "Starting the new application..."
            nohup java -jar "${JAR_FILE}" > "${LOG_FILE}" 2>&1 &
            
            echo "Deployment script finished. Checking logs in 10 seconds..."
            sleep 10
            cat $LOG_FILE